- name: play
  hosts: ec2
  environment:
    DOTFILES_FORCE: "true"
  tasks:
    - name: get dotfiles facts
      action: 'dotfile_facts'

    - name: checkout dotfiles
      ansible.builtin.git:
        repo: 'https://github.com/daler/dotfiles.git'
        dest: '~/dotfiles'

    - name: copy dotfiles
      ansible.builtin.command: ~/dotfiles/setup.sh --dotfiles
      when: not dotfiles

    - name: if conda is already installed, ensure it's on the path
      ansible.builtin.lineinfile:
        path: "~/.path"
        line: 'export PATH="/data/miniforge/condabin:$PATH"'
        state: present

    - name: install conda
      ansible.builtin.shell:
        cmd: CONDA_INSTALLATION_DIR=/data/miniforge ~/dotfiles/setup.sh --install-conda
        executable: /bin/bash
      when: not conda

    - name: set up bioconda
      ansible.builtin.command: ~/dotfiles/setup.sh --set-up-bioconda
      when: not bioconda

    - name: install ripgrep
      ansible.builtin.command: ~/dotfiles/setup.sh --install-ripgrep
      when: not rg

    - name: install vd
      ansible.builtin.command: ~/dotfiles/setup.sh --install-vd
      when: not vd

    - name: install fd
      ansible.builtin.command: ~/dotfiles/setup.sh --install-fd
      when: not fd

    - name: install fzf
      ansible.builtin.command: ~/dotfiles/setup.sh --install-fzf
      when: not fzf

    - name: install npm
      ansible.builtin.command: ~/dotfiles/setup.sh --install-npm
      when: not npm

    - name: install nvim
      ansible.builtin.command: ~/dotfiles/setup.sh --install-neovim
      when: not nvim

    - name: install nvim plugins
      ansible.builtin.command: |
        nvim +"lua require('lazy').restore({wait=true})" +q +q
      when: not lazy

    - name: install lsps
      ansible.builtin.shell:
        cmd: ca && nvim --headless  +"MasonInstall pyright black shfmt bash-language-server isort" +q
        executable: /bin/bash
      when: not mason

    - name: apt installs
      become: true
      ansible.builtin.apt:
        update_cache: true
        pkg:
          - build-essential
          - curl
          - docker.io
          - git
          - htop
          - iotop
          - podman
          - python3-paramiko  # for configuring .ssh/config
          - rsync
          - tmux
          - unzip
          - wget

    - name: apt upgrade
      become: true
      ansible.builtin.apt:
        upgrade: true

    - name: Create "docker" group
      become: true
      group:
        name: "docker"
        state: present

    - name: Add remote "ubuntu" user to "docker" group
      become: true
      user:
        name: "ubuntu"
        group: "docker"

    - name: Get local username
      delegate_to: localhost
      ansible.builtin.command: git config --get user.name
      register: local_git_user

    - name: Get local email
      delegate_to: localhost
      ansible.builtin.command: git config --get user.email
      register: local_git_email

    - name: Set git config on remote
      ansible.builtin.command: "{{ item }}"
      loop:
        - git config --global user.name "{{ local_git_user.stdout }}"
        - git config --global user.email "{{ local_git_email.stdout }}"

    # From https://docs.github.com/en/authentication/troubleshooting-ssh/using-ssh-over-the-https-port:
    - name: Add GitHub SSH-over-HTTPS to .ssh/config
      become: true
      community.general.ssh_config:
        user: ubuntu
        remote_user: git
        hostname: ssh.github.com
        port: '443'
        host: github.com

    - name: Uncomment AllowAgentForwarding in sshd_config
      become: true
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?\s*AllowAgentForwarding'
        line: 'AllowAgentForwarding yes'
        state: present
      notify: Restart sshd

  handlers:
    - name: Restart sshd
      become: true
      ansible.builtin.service:
        name: ssh
        state: restarted
