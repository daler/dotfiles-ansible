---
# Common dotfiles setup tasks
# Handles git configuration and dotfiles installation

- name: get dotfiles facts
  action: 'dotfile_facts'

- name: checkout dotfiles
  ansible.builtin.git:
    repo: 'https://github.com/daler/dotfiles.git'
    dest: '~/dotfiles'

- name: copy dotfiles
  ansible.builtin.command: ~/dotfiles/setup.sh --dotfiles
  when: not dotfiles

- name: if conda is already installed, ensure it's on the path
  ansible.builtin.lineinfile:
    path: "~/.path"
    line: 'export PATH="/data/miniforge/condabin:$PATH"'
    state: present
  when: conda_needs_path

- name: install conda
  ansible.builtin.shell:
    cmd: CONDA_INSTALLATION_DIR=/data/miniforge ~/dotfiles/setup.sh --install-conda
    executable: /bin/bash
  when: not conda

- name: set up bioconda
  ansible.builtin.command: ~/dotfiles/setup.sh --set-up-bioconda
  when: not bioconda

- name: ensure ~/opt/bin is on the path
  ansible.builtin.lineinfile:
    path: ~/.path
    line: 'export PATH=$PATH:~/opt/bin'
    create: yes
    state: present

- name: symlink fd if env already exists on persistent volume
  ansible.builtin.file:
    src: /data/miniforge/envs/fd/bin/fd
    dest: ~/opt/bin/fd
    state: link
  when: fd_needs_link

- name: symlink vd if env already exists on persistent volume
  ansible.builtin.file:
    src: /data/miniforge/envs/visidata/bin/vd
    dest: ~/opt/bin/vd
    state: link
  when: vd_needs_link

- name: npm path in ~/.path
  ansible.builtin.lineinfile:
    path: ~/.path
    line: 'export PATH=$PATH:/data/miniforge/envs/npm/bin'
    create: yes
    state: present
  when: npm_needs_path

- name: install ripgrep
  ansible.builtin.command: ~/dotfiles/setup.sh --install-ripgrep
  when: not rg

- name: install vd
  ansible.builtin.command: ~/dotfiles/setup.sh --install-vd
  when: not vd and not vd_needs_link

- name: install fd
  ansible.builtin.command: ~/dotfiles/setup.sh --install-fd
  when: not fd and not fd_needs_link

- name: install fzf
  ansible.builtin.command: ~/dotfiles/setup.sh --install-fzf
  when: not fzf

- name: install npm
  ansible.builtin.command: ~/dotfiles/setup.sh --install-npm
  when: not npm

- name: install nvim
  ansible.builtin.command: ~/dotfiles/setup.sh --install-neovim
  when: not nvim

- name: install nvim plugins
  ansible.builtin.command: |
    nvim +"lua require('lazy').restore({wait=true})" +q +q
  when: not lazy

- name: install lsps
  ansible.builtin.shell:
    cmd: ca && nvim --headless  +"MasonInstall pyright black shfmt bash-language-server isort" +q
    executable: /bin/bash
  when: not mason

- name: Get local username
  delegate_to: localhost
  ansible.builtin.command: git config --get user.name
  register: local_git_user

- name: Get local email
  delegate_to: localhost
  ansible.builtin.command: git config --get user.email
  register: local_git_email

- name: Set git config on remote
  ansible.builtin.command: "{{ item }}"
  loop:
    - git config --global user.name "{{ local_git_user.stdout }}"
    - git config --global user.email "{{ local_git_email.stdout }}"

- name: Add GitHub SSH-over-HTTPS to .ssh/config
  become: true
  community.general.ssh_config:
    user: ubuntu
    remote_user: git
    hostname: ssh.github.com
    port: '443'
    host: github.com

- name: Configure bash prompt
  ansible.builtin.copy:
    dest: ~/.bash_prompt
    content: |
      export PS1="\u@\[\033[1;38;5;133m\]\h\[\033[0m\]:\w\$ "
    mode: '0644'
